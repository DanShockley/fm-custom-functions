/**
 *
 * Determine the length of a JSON array
 *
 * @param {text} JSON_Array - JSON array object
 *
 * @returnSuccess {number} length of the array
 * 
 * @returnError {array} error[n].code - error code
 * @returnError {array} error[n].descriptor - description of error
 * 
 * @module JSON
 * 
 * @version 1.0.1
 * @author Allen Ulbricht, https://github.com/aulbricht
 * @website http://northcoastsoftware.com
 *
 */


 Let ([
	~json = JSON_Array;
	~jsonVal = JSONFormatElements ( ~json );
	~error = Case (
				Left ( ~jsonVal; 1 ) = "?"; 
					JSONSetElement ("{}"; 
						[ "errorCode"; -3; JSONNumber ]; 
						[ "descriptor"; "JSON invalid"; JSONString ]
						);
				Left ( ~jsonVal; 1 ) â‰  "["; 
					JSONSetElement ("{}"; 
						[ "errorCode"; -3; JSONNumber ]; 
						[ "descriptor"; "JSON invalid: Must be an array"; JSONString ]
						)
					);

	// remove the current array value
	~result = JSONDeleteElement ( ~json; "[0]" ); 

	// check to see if any values remain in the array
	~next = If ( not IsEmpty ( JSONGetElement ( ~result; "[0]" )); 

				// if any values remain, recurse
				JSON.ArrayLength ( ~result ); 

				// if no values remain, return starting count of 0
				0 

				);
~=""];

Case ( 

	// if this iteration had an error, return it instead of a number
	not IsEmpty ( ~error ); ~error; 

	// if only a positive integer was returned from the next recursion, add the value; otherwise just return the non-numeric value
	Length ( Filter ( ~next; "0123456789" )) = Length ( ~next ); ~next + 1; 

	~next
	
)

)
