/**
 * VERSION:			1.0.0
 * Function Name: 	ValueList.toJSON()
 * Name Dependency: yes (i.e. recursion, must update the code if renaming the function)
 * Purpose: 		Convert value list to a JSON array
 *
 * @param {string}	valueList = return delimited value list
 * @param {string}	format = "object" or "array"
 * @param {string}	preKey = key string under which to store the values, e.g. "names.first" (or "." for root)
 * @param {string}	postKey = if you want an additional key string after the array cell, e.g. "[3].names.last"; note: only for an array
 *
 * @returnSuccess {integer} length of the array
 * 
 * @author Allen Ulbricht, https://github.com/aulbricht
 * @website http://northcoastsoftware.com
 *
 */

Let([

	~list = valueList ;
	~format = format ;
	~preKey = preKey ;
	~postKey = postKey ;

	~value = RightValues ( ~list; 1 );
	~value = If ( Right ( ~value ; 1 ) = "¶" ; Left ( ~value ; Length ( ~value ) - 1 ); ~value );
	~count = ValueCount ( ~list );
	~listUpdated = LeftValues ( ~list ; ~count - 1 );
	~jsonInitString =  If ( ~format = "object" ; "{}" ; "[]" );

~=""];

Case ( 

	~count = 0 ; If ( ~preKey = "." or IsEmpty ( ~preKey ) ; ~jsonInitString ; "" ) ;
	~count > 0 ;
		JSONSetElement (  
			// RECURSION
			ValueList.toJSON ( ~listUpdated ; ~format ; ~preKey ; ~postKey ) ;

			// array cell
			~preKey & If ( Right ( ~preKey ; 1 ) ≠ "." ; "." ) & 
			If ( ~format = "object" ; ~count ; "[" & ~count - 1 & "]" ) &
			If ( Left ( ~postKey ; 1 ) ≠ "." ; "." ) & ~postKey ;

			// value to store
			~value ;

			// Determine the data type
			Case ( 
				Left ( JSONFormatElements ( ~value ) ; 1 ) ≠ "?" and Left ( ~value ; 1 ) = "{" ; JSONObject ;
				Left ( JSONFormatElements ( ~value ) ; 1 ) ≠ "?" and Left ( ~value ; 1 ) = "[" ; JSONArray ;
				GetAsText ( GetAsTimestamp ( ~value ) ) = ~value ; JSONString;
				GetAsNumber ( ~value ) = ~value ; JSONNumber;
				GetAsText ( ~value ) = ~value ; JSONString;
				)
	 	)

)

)