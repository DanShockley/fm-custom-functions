/**
 * VERSION:			1.0.0
 * Function Name: 	JSON.Merge()
 * Name Dependency: yes (i.e. recursion, must update the code if renaming the function)
 * Purpose: 		Merge two JSON objects
 *
 * @param {string}	json1 = JSON object (or array object)
 * @param {string}	json2 = JSON object (or array object)
 *
 * @note			if json1 is an Object, the result will be a JSON object
 * @note			if json1 is an Object and json2 is an array, the array numbers (e.g. [0],[1],[2]) will be converted into text keys "0","1","2"
 * @note			if json1 is an Array, the result will be an array
 * @note			if json1 is an Array and json2 is an object, the keys will be discarded and the values slotted into the array in alphanumeric order by key
 *
 * @returnSuccess {JSON} merged JSON object
 * @returnError {JSON Array} error[n].code = error code
 * @returnError {JSON Array} error[n].description = description of error
 * @returnError {JSON Array} error[n].notes = additional notes about the error
 * 
 * @author Allen Ulbricht, https://github.com/aulbricht
 * @website http://northcoastsoftware.com
 *
 */

 Let ([

	~json1 = json1;
	~json2 = json2;
	~jsonVal1 = JSONFormatElements ( ~json1 );
	~jsonVal2 = JSONFormatElements ( ~json2 );
	~error = Case (
				Left ( ~jsonVal1; 1 ) = "?" or Left ( ~jsonVal2; 1 ) = "?"; JSONSetElement ("{}"; 
					[ "error[0].code"; -2; JSONNumber ]; 
					[ "error[0].description"; "JSON invalid"; JSONString ]
					);
				);

	~isArray_json1 = Left ( ~json1 ; 1 ) = "[" ;
	~isArray_json2 = Left ( ~json2 ; 1 ) = "[" ;
	~nextArrayCell = ValueCount ( JSONListKeys ( ~json1 ; "." ) );

	~keyList = JSONListKeys ( ~json2 ; "." );
	~key = Case ( 
			~isArray_json2 ; "[0]" ;
			GetValue ( ~keyList ; 1 )
			);
	~value = JSONGetElement ( ~json2 ; ~key );
	~type = Case ( 
				Left ( JSONFormatElements ( ~value ) ; 1 ) ≠ "?" and Left ( ~value ; 1 ) = "{" ; JSONObject ;
				Left ( JSONFormatElements ( ~value ) ; 1 ) ≠ "?" and Left ( ~value ; 1 ) = "[" ; JSONArray ;
				GetAsText ( GetAsTimestamp ( ~value ) ) = ~value ; JSONString;
				GetAsNumber ( ~value ) = ~value ; JSONNumber;
				GetAsText ( ~value ) = ~value ; JSONString;
				);

	~newKey = Case ( 
			~isArray_json1 and ~isArray_json2 ; "[" & ~nextArrayCell & "]" ;
			~isArray_json1 ≠ ~isArray_json2 ; GetAsText ( ~nextArrayCell );
			~key
			);
	~jsonMerged = JSONSetElement ( ~json1 ; ~newKey ; ~value ; ~type );
	~jsonRemaining = JSONDeleteElement ( ~json2 ; ~key );
	
~=""];

Case ( 
	not IsEmpty ( ~error ); ~error; // if this iteration had an error, return it instead of a number
	ValueCount ( ~keyList ) > 1 ; JSON.Merge ( ~jsonMerged ; ~jsonRemaining ) ; // if there are more keys to merge, go to next recursion
	~jsonMerged // if there are no additional keys left to merge, return the merged object
)

)