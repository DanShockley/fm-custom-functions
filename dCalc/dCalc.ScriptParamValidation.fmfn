/**
 * 
 * Validate script parameters and convert into local variables
 * @note: this is a DYNAMIC CALCULATION, meant to called using locally-set variables, e.g. dCalc_scriptParamValidation ( "$scriptParametersVarName" ; "$validationRulesVarName"  )
 * 
 * @parameter {string} varName_scriptParameters = local script variable name for script parameters, e.g. $myVariable = Get ( ScriptParameter )
 * @parameter {string} varName_validationRules = local script variable name for validation rules, e.g. $myVariable = Validate.IsRequired ( "parameterName" ; "text" )
 * 
 * @note Parameters can optionally include "$" or "$$" in front of the variable names. If they are omitted, a single "$" will be added, assuming it to be a local variable
 * 
 * @resultSuccess {NULL}
 * 
 * @returnError {object} Validate.Error: an error object
 * 
 * @note: This calculation could be done as a custom function, but in case of large script parameter data/values, it's done as a dynamic calculation (since FileMaker inexplicably takes a long time to pass in/out large variables)
 * 
 * @module dCalc
 * @requires {constant} cVar.errorsArray
 * @requires {module} Error
 * @requires {module} Validate
 * @requires {module} Variable
 * 
 * @version 2.2.3
 * @author Allen Ulbricht, https://github.com/aulbricht
 * 
 */

Let ([

	// get script parameters & validation rules
	~varName_scriptParams = varName_scriptParameters ;
	~varName_validationRules = varName_validationRules ;
	

	~paramsVarName = If ( Left ( ~varName_scriptParams ; 1 ) ≠ "$" ; "$" ) & ~varName_scriptParams ;
	~params = Evaluate ( ~paramsVarName );
	~validationRulesVarName = If ( Left ( ~varName_validationRules ; 1 ) ≠ "$" ; "$" ) & ~varName_validationRules ;
	~validationRules_raw = Evaluate ( ~validationRulesVarName );

	// test for invalid JSON in parameters object
	~is_invalidJSON = ( Left ( JSONFormatElements ( ~params ) ; 1 ) = "?" );

	~numLines = ValueCount ( ~validationRules_raw );

	~validationRules = 
		While ( 

			//// initial variables ////
			[ 

				~LIST_rules = "" ;
				~i = 1 ;
				
				~=""] ; 

			//// "while this is true" loop condition ///////
			~i ≤ ~numLines ; 

			//// logic ////////////////
			[ 

				~rule_raw = GetValue ( ~validationRules_raw ; ~i );
				~rule_trimmed = TrimAll ( ~rule_raw ; True ; 0 );
				~rule_noSpaces = Substitute ( ~rule_raw ; " " ; "" );
				~rule = 
					Case (

						Left ( ~rule_raw ; 8 ) ≠ "validate" ; "" ;

						// if there are multiple rules and any except the last one do not end with semicolon, add one
						// note: we expect even a single line to have a semicolon at the end because later it's inserted into a List() statement
						Right ( ~rule_noSpaces ; 1 ) ≠ ";" and ( ~i = 1 or ~i ≠ ~numLines ); 
							~rule_trimmed & "; " ;

						// default: do nothing else to the rule
						~rule_trimmed

						);
				~LIST_rules = 
					If ( 
						~numLines = 1 ; ~rule ;
						List (
							~LIST_rules ;
							~rule
							)
						);

				~i = ~i + 1 ;

				~=""] ; 

			//// result ///////////////
			~LIST_rules

			);

	~numRules = ValueCount ( ~validationRules );

	~validationEvalString = 
		"Validate.ApplyRules ( ¶List ( ¶"
			& ~validationRules
			& If ( ~numRules = 1 ; "¶\"\"" )
			& " ¶) ¶)"
			;

	// setup the rules for validation functions
	~_void = Validate.This ( ~params ); //If ( not IsEmpty ( ~validationRules ) ; Validate.This ( ~params ) );

	// perform the evaluate
	~validationResult = 
		Case (
			~numRules = 0 or IsEmpty ( ~validationRules ) ; "" ;
			Evaluate ( ~validationEvalString )
			);

	~ARRAY_error = 
		Case ( 
			/* IF CONDITION */
			~validationResult = "?" ;

				/* THEN */ 
				Error.Wrap ( 
					-1 ; // error code
					"Error in validation rules for script \"" & Get ( ScriptName ) & "\"" ; //error message
					"" ; // additional data
					cValue.ErrorsArray
					);

			/* IF CONDITION */
			not IsEmpty ( ~params ) 
				and not IsEmpty ( ~validationRules )
				and ~is_invalidJSON ; 

				/* THEN */ 
				Error.Wrap ( 
					1710 ; // error code
					"Invalid JSON in script parameter for \"" & Get ( ScriptName ) & "\"" ; //error message
					"" ; // additional data
					cValue.ErrorsArray
					)
			);
	~error = 	
		Case ( 
			not IsEmpty ( ~ARRAY_error ) ; ~ARRAY_error ;
			~validationResult
			);

~=""];

// set external, local variables
Let ([

	// LOCAL VARIABLES TO SET ////////////////////////////////////////////////

	$this.scriptParameter = ~params ;
	~_void = Var.DynamicAssignVar ( cVar.errorsArray ; ~error ; "" );

	/////////////////////////////////////////////////////////////////////////////////

~=""];"")

// convert JSON parameter elements into local variables
& Case ( 

	not IsEmpty ( ~error ) ; ~error ; 

	While ( 

		//// initial variables ////
		[ 
			
			~keys = JSONListKeys ( ~params ; "." ) ; 
			~numKeys = ValueCount ( ~keys ) ;
			~i = 1 ;
			
			~=""] ; 

		//// "while this is true" loop condition ///////
		~i ≤ ~numKeys ; 

		//// logic ////////////////
		[ 

			~key = GetValue ( ~keys ; ~i );

			~result =
				Case ( 
				
					// if the JSON document's root node doesn't contain any keys, return 0 ("no error")
					IsEmpty ( ~key ) ; 0 ; 
					
					// create variable based on key and then continue looping to process remaining keys
					Let ([ 

						~value = JSONGetElement ( ~params ; ~key ) ; 
						
						~text = GetAsText ( ~value ) ; 
						~number = GetAsNumber ( ~value ) ; 
						~validDate = IsValid ( GetAsDate ( ~text ) ) and not IsEmpty ( ~number ) ; 
						~validTime = IsValid ( GetAsTime ( ~text ) ) and Position ( ~text ; ":" ; 1 ; 1 ) > 0 and not IsEmpty ( ~number ) ;
						~value = 
							Case ( 
								~value = "" or ~value = "?" ; Quote ( ~value ) ;
								~validTime and ~validDate ; "GetAsTimestamp ( " & Quote ( ~value ) & " )" ;
								~validTime ; "GetAsTime ( " & Quote ( ~value ) & " )" ;
								~validDate ; "GetAsDate ( " & Quote ( ~value ) & " )" ;
								~text ≠ GetAsText ( ~number ) ; Quote ( ~value ) ; 
								~number
								); 

						// create variable based on JSON key/value pair
						~error = 
							EvaluationError ( 
								Evaluate ( "Let ( $" & ~key & " = " & ~value & " ; 0 ) " ) 
								);
						~=""]; 

						If ( ~error ≠ 0 ; ~error ; "" )

						)
					);

			~i = ~i + 1 ;

			~=""] ; 

		//// result ///////////////
		~result

		) // end WHILE

	) // end CASE

) // end LET
