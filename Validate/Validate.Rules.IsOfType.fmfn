/**
 *
 * A rule that tests that the value at the given JSON key path (if not NULL) is of the required type
 *
 * @param {string} key = the JSON key path to the value to test; if NULL, validation is aborted
 * @param {string} LIST_validTypes = list of valid data types for the value; if NULL, any data type is accepted
 *				Valid types: text, number, time, timestamp, object, array
 *
 * @returnSuccess {NULL}
 * @returnError {object} Validate.Error: an error object
 * 
 * @module Validate
 * @requires {function} Validate._dataType()
 * @requires {function} ValueList.ValueExistsInList()
 * 
 * @version 1.0.0
 * @author Allen Ulbricht, https://github.com/aulbricht
 *
 */

Let ([

	// Abstract parameters
	~key = key ;
	~list = UniqueValues ( LIST_validTypes );

	// Get the first type in the list to test
	~type = GetValue ( ~list ; 1 );

	~value = JSONGetElement( $Validate.This ; ~key  )

];

Case (

	// if no value was provided or if no type was provided, return NULL (abort validation)
	IsEmpty ( ~key ) or IsEmpty ( ~value ) or IsEmpty ( ~list ) ; "" ; 

	// validate that the given value matches a valid data type
	Let ([ 

		// determine base data type (e.g. text, number, etc)
		~LIST_validDataTypes = Validate._dataType ( ~value );

		// validate data type against first higher order data types, then base data types (e.g. "boolean" could also be true if validating as such or as "number")
		~typeMatch = ValueList.ValueExistsInList( ~LIST_validDataTypes ; ~type );

		~=""]; 


			Case ( 

				// return NULL if valid
				~typeMatch ; "" ;  

				// if there are other valid types, recurse to check the next one
				ValueCount ( ~list ) > 1 ; 

					// RECURSE ///////////////////////////
					Validate.Rule.IsOfType ( ~key ; Substitute ( ~list & "¶" ; ~type & "¶" ; "" ) );
					////////////////////////////////////////


				// else return an error object
				Validate._errorCreate ( ~key ; "Value type is invalid"  ) 

				)

			)

		)

)
