/**
 *
 * A rule that tests that the value at the given JSON key path (if not NULL) is of the required type
 *
 * @param {string} key = the JSON key path to the value to test; if NULL, validation is aborted
 * @param {string} LIST_dataTypes = list of valid data types for the value; if NULL, any data type is accepted
 *				Valid types: text, number, boolean, date, time, timestamp, object, array, null, !null
 *				Note: "!null" = not null, meaning that the value cannot be null
 *
 * @note for this validation, "null" is always assumed to be a valid key value type
 *
 * @returnSuccess {NULL}
 * @returnError {object} Validate.Error: an error object
 * 
 * @module Validate
 * @requires {function} Validate._dataType()
 * @requires {function} Validate._errorCreate()
 * 
 * @version 2.3.0
 * @author Allen Ulbricht, https://github.com/aulbricht
 *
 */


Let ([

	// Abstract parameters
	~key = key ;
	~LIST_dataTypes = LIST_dataTypes ;
	~dataToValidate = $$validate.this ;

	// filter list to unique values so we don't waste time checking duplicate data types
	~LIST_dataTypes = UniqueValues ( ~LIST_dataTypes );

	// remove any trailing carriage returns
	~LIST_dataTypes = 
		If ( Right ( ~LIST_dataTypes ; 1 ) = "¶" ; 
			Left ( ~LIST_dataTypes ; Length ( ~LIST_dataTypes ) - 1  );
			~LIST_dataTypes
			);

	// All valid data types (which this function is able to validate)
	~LIST_validDataTypes = List ( "!null" ; "null" ; "text"; "number"; "boolean"; "date"; "time"; "timestamp"; "object"; "array" ) ; 

	// Get the first type in the list to test
	~type = GetValue ( ~LIST_dataTypes ; 1 );

	~value = Case ( 
			Left ( JSONFormatElements ( ~dataToValidate ) ; 1 ) = "?" ; "" ; 
			JSONGetElement( ~dataToValidate ; ~key  )
			);

~=""];

Case (

	// if the value is NULL, abort without error since that's allowed for this validation type
	( PatternCount ( ~LIST_dataTypes ; "!null" ) = 0 and IsEmpty ( ~value ) )
		or IsEmpty ( ~dataToValidate ); 
		"" ;


	// evaluate basic cases for abort
	IsEmpty ( ~key ) // no key was provided
	or IsEmpty ( ~LIST_dataTypes ) // no type was provided
	or PatternCount ( "¶" & JSONListKeys ( ~dataToValidate ; "." ) & "¶"; "¶" & ~key & "¶" ) = 0 ; // the key is missing
		"" ; // return NULL (abort validation)



	// if the current data type is invalid, return an error (abort validation)
	PatternCount ( "¶" & ~LIST_validDataTypes & "¶"; "¶" & ~type & "¶" ) = 0 ; 

		// else return an error object
		Validate._errorCreate ( ~key ; "\"" & ~type & "\" is not a valid data type." );



	// DEFAULT CASE CONDITION
	// validate that the given value matches a valid data type
	Let ([ 

		// determine the possible valid data types for the given value (e.g. text, number, etc)
		~LIST_baseDataTypes = Validate._dataType ( ~value );

		// validate data type against first higher order data type, then base data type (e.g. "boolean" as a base data type could also be true if validating as such or as "number", which would be a higher order data type for a boolean value)
		~typeMatch = PatternCount ( "¶" & ~LIST_baseDataTypes & "¶"; "¶" & ~type & "¶" ) > 0 ;

		~=""]; 

			Case ( 

				// return NULL if valid
				~typeMatch ; "" ;  

				// if there are other valid types given, recurse to check the next one against the list of actual valid types for the given value
				ValueCount ( ~LIST_dataTypes ) > 1 ; 

					// RECURSE /////////////////////////////
					Validate.Rule.IsOfType ( ~key ; Substitute ( ~LIST_dataTypes & "¶" ; ~type & "¶" ; "" ) );
					////////////////////////////////////////


				// else return an error object
				Validate._errorCreate ( ~key ; "The value's actual data type" & 
					If ( ValueCount ( ~LIST_baseDataTypes ) > 1 ; 
						"s (" & Substitute ( ~LIST_baseDataTypes ; "¶"; ", " ) & ") are"; 
						" (" & ~LIST_baseDataTypes & ") is"
						) 
						& " not on the given list of allowed data types for the parameter."  
					) 

				)

			)

		)

)