/**
 *
 * Return a LIST of valid data types for the given value (e.g. 0 or 1 would be valid for both "number" and "boolean")
 *
 * @param {string} value = data to evaluate for type
 * 
 * @returns {string} LIST of valid data types
 *
 * @private
 * @module Validate
 *
 * @version 2.3.0
 * @author Allen Ulbricht, https://github.com/aulbricht
 *
 */


Let ([

	// Abstract parameter
	~value = value ;

	~baseDataType = 
		Case ( 

			// empty value
			IsEmpty ( ~value ) ; "null" ;

			// JSON object types
			Left ( JSONFormatElements ( ~value ) ; 1 ) ≠ "?" and Left ( ~value ; 1 ) = "{" ; "object" ;
			Left ( JSONFormatElements ( ~value ) ; 1 ) ≠ "?" and Left ( ~value ; 1 ) = "[" ; "array" ;

			// timestamp
			GetAsText ( GetAsTimestamp ( ~value ) ) = ~value ; "timestamp" ;

			// date
			GetAsText ( GetAsDate ( ~value ) ) = ~value ; "date" ;

			// time
			GetAsText ( GetAsTime ( ~value ) ) = ~value ; "time" ;

			// number
			GetAsNumber ( ~value ) = ~value ; "number" ; 

			// text
			GetAsText ( ~value ) = ~value ; "text" ;

			);


	///////////////////////////////////////////////////////////////////////////
	// add check for higher order data types (e.g. "boolean" which could also be true if validating as "number") an special cases
	///////////////////////////////////////////////////////////////////////////

	// initialize variable
	~LIST_higherOrderDataTypes = "" ;

	// boolean / number
	~LIST_higherOrderDataTypes = If ( 
		~baseDataType = "number" and ( ~value = 0 or ~value = 1 ); 
		List ( ~LIST_higherOrderDataTypes ; "boolean" );
		~LIST_higherOrderDataTypes
		);

	// number / text
	~LIST_higherOrderDataTypes = If ( 
		~baseDataType = "number" ;
		List ( ~LIST_higherOrderDataTypes ; "text" );
		~LIST_higherOrderDataTypes
		);

	// object / text
	~LIST_higherOrderDataTypes = If ( 
		~baseDataType = "object" ;
		List ( ~LIST_higherOrderDataTypes ; "text" );
		~LIST_higherOrderDataTypes
		);

	// array / text
	~LIST_higherOrderDataTypes = If ( 
		~baseDataType = "array" ;
		List ( ~LIST_higherOrderDataTypes ; "text" );
		~LIST_higherOrderDataTypes
		);

	// date / text
	~LIST_higherOrderDataTypes = If ( 
		~baseDataType = "date" ;
		List ( ~LIST_higherOrderDataTypes ; "text" );
		~LIST_higherOrderDataTypes
		);

	// time / text
	~LIST_higherOrderDataTypes = If ( 
		~baseDataType = "time" ; 
		List ( ~LIST_higherOrderDataTypes ; "text" );
		~LIST_higherOrderDataTypes
		);

	// timestamp / text
	~LIST_higherOrderDataTypes = If ( 
		~baseDataType = "timestamp" ; 
		List ( ~LIST_higherOrderDataTypes ; "text" );
		~LIST_higherOrderDataTypes
		);

~=""];


List (

	~basedataType ;
	~LIST_higherOrderDataTypes 

	)

)