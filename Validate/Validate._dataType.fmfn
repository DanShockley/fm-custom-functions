/**
 *
 * Return a LIST of valid data types, (e.g. 0 or 1 would be valid for both "number" and "boolean")
 *
 * @param {string} data = data to evaluate for type
 * 
 * @returns {string} LIST of valid data types
 *
 * @private
 * @module Validate
 *
 * @version 1.0.0
 * @author Allen Ulbricht, https://github.com/aulbricht
 *
 */


Let ([

	// Abstract parameter
	~value = value ;

	~baseDataType = Case ( 

				Left ( JSONFormatElements ( ~value ) ; 1 ) ≠ "?" and Left ( ~value ; 1 ) = "{" ; "object" ;
				Left ( JSONFormatElements ( ~value ) ; 1 ) ≠ "?" and Left ( ~value ; 1 ) = "[" ; "array" ;
				GetAsText ( GetAsTimestamp ( ~value ) ) = ~value ; "timestamp" ;
				GetAsText ( GetAsTime ( ~value ) ) = ~value ; "time" ;
				GetAsTime ( ~value ) = ~value ; "number" ; // note: using GetAsTime on a number will equal the number, but not if the same value is set as text
				GetAsText ( ~value ) = ~value ; "text" ;

				);

	// add check for higher order data types (e.g. "boolean" which could also be true if validating as "number")
	~higherOdrerDataType = Case ( 
				~baseDataType = "number" and ( ~value = 0 or ~value = 1 ); "boolean"
				); 

~=""];

List (
	~basedataType ;
	~higherOdrerDataType 
)

)