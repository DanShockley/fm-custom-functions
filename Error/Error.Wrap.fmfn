/********
 * 
 * Wrap the error in a JSON Object
 * 
 * @param {number} errorCode - the FileMaker Error Code.
 * @param {string} [customMessage] - OPTIONAL: custom description of the error
 * @param {text or object} [data] - OPTIONAL: extra data to include in the error object
 * @param {object} [errorArray] - OPTIONAL: include an existing array or object to create or add to an error array
 * 
 * @return {array} array of errors, or if the error code is 0 or empty, return only what was passed in for the errorArray
 * 
 * @module Error
 * 
 * @version 2.0.1
 * @author Allen Ulbricht, https://github.com/aulbricht
 * 
 *******/


Let ([

	~message = customMessage ;
	~data = data ;
	~array = errorArray ; 
	~nextArrayCell = 
		If ( not IsEmpty ( ~array ) ; 
			ValueCount ( JSONListKeys ( ~array ; "." ) );
			0 
			);

	~param = Get (  ScriptParameter );
	~paramFormatted = JSONFormatElements ( ~param );
	~paramIsJSON = Left ( ~paramFormatted ; 1 ) â‰  "?" ;

	~error = errorCode ;
	~error = If ( IsEmpty ( ~error ) ; 0 ; GetAsNumber ( ~error ) );

	// Set up the new error object (note: not yet combining with any existing, passed in error array)
	~base = JSONSetElement ( "{}" ; "errorCode" ; ~error ; JSONNumber );
	~descriptor = If ( not ~error ; "" ; Error._getDescriptor ( ~error ) );
	~basePlusDescriptor = JSONSetElement ( ~base ; "descriptor"; ~descriptor ; JSONString );
	
	~meta = 
		JSONSetElement ( "{}" ;
			[ "accountName" ; Get ( AccountName ) ; JSONString ];
			[ "accountPrivilegeSetName" ; Get ( AccountPrivilegeSetName ) ; JSONString ];
			[ "activeFieldName" ; Get ( ActiveFieldName ) ; JSONString ];
			[ "activeFieldTableName" ; Get ( ActiveFieldTableName ) ; JSONString ];
			[ "activeFieldName" ; Get ( ActiveFieldName ) ; JSONString ];
			[ "activeLayoutObjectName" ; Get ( ActiveLayoutObjectName ) ; JSONString ];
			[ "filename" ; Get ( FileName ) ; JSONString ];
			[ "layoutName" ; Get ( LayoutName ) ; JSONString ];
			[ "layoutTableName" ; Get ( LayoutTableName ) ; JSONString ];
			[ "recordOpenCount" ; Get ( RecordOpenCount ) ; JSONNumber ];
			[ "scriptParameter " ; 
				If ( ~paramIsJSON = True ; ~paramFormatted ; ~param ) ; 
				If ( ~paramIsJSON = True ; JSONObject ; JSONString ) 
				];
			[ "recordModificationCount" ; Get ( RecordModificationCount ) ; JSONNumber ];
			[ "scriptName" ; Get ( ScriptName ) ; JSONString ];
			[ "userCount " ; Get ( UserCount ) ; JSONNumber ]
			);
	
	// Determine the datatype for anything included in the "data" parameter
	~dataType = 
		Let ( ~leftChar = Left ( JSONFormatElements ( ~data )  ; 1 ); 
			Case ( 
				~leftChar = "{" ; JSONObject ;  
				~leftChar = "[" ; JSONArray ; 
				JSONString 
				) 
			);
	
	// Add additional data to the new error object
	~currentError = 
		JSONSetElement( ~basePlusDescriptor ; 
			[ "data" ; ~data ; ~dataType ];
			[ "message" ; If ( not IsEmpty ( ~message ) ; ~message ; ~descriptor ) ; JSONString ];
			[ "meta" ; ~meta ; JSONObject ]
			);

~=""];


Case (
	
	// If the error code is 0, do not add it to the errors array; rather, return the original error object
	not ~error ; ~array ;

	// If the provided error object is empty, create an array out of the new error object
	IsEmpty ( ~array ) ; 
		JSONFormatElements (
			JSONSetElement ( "[]" ; 
				[ "[0]" ; ~currentError ; JSONObject ]
				)
			);

	// If the provided error object is an array already, append the new error object
	Left ( ~array ; 1 ) = "[" ; 
		JSONFormatElements (
			JSONSetElement( ~array ; ~nextArrayCell ; ~currentError ; JSONObject )
			);

	// If the provided error object is a single error object, create an array out of the two objects
	Left ( ~array ; 1 ) = "{" ; 
		JSONFormatElements (
			JSONSetElement ( "[]" ; 
				[ "[0]" ; ~array ; JSONObject ];
				[ "[1]" ; ~currentError ; JSONObject ]
				)
			);

	// If something is wrong with the error array, just return the new error object
	~currentError

	)

)