/********
 * 
 * Tests the object for an errorCode
 * 
 * @param {object} errorObject - JSON error object or array
 * 
 * @return {boolean} TRUE if any errorCode is not 0 or NULL
 * 
 * @module Error
 * 
 * @version 1.1.2
 * @author Allen Ulbricht, https://github.com/aulbricht
 * 
 ********/


Let ([

	~eo = errorObject ;

	~isObject = Left ( JSONFormatElements ( ~eo )  ; 1 ) = "{" ;
	~isArray = Left ( JSONFormatElements ( ~eo )  ; 1 ) = "[" ;
	~isJSON = ~isObject or ~isArray ;

	~errorNonJSON = If ( not ( ~isJSON ) ; ~eo );
	~LIST_keys = JSONListKeys ( ~eo ; "." );
	~numKeys = Case ( 
			~isJSON ; ValueCount ( ~LIST_keys ); 
			IsEmpty ( ~eo ) ; 0 ;
			1
			);

	~currentErrorCode = If ( ~isJSON ; 
					JSONGetElement ( ~eo ;  If ( ~isArray ; "[0]." ) & "errorCode" );
					~errorNonJSON 
					);

	~errorCode = Case ( 
			~isJSON ; 
				Case ( 
					~numKeys > 1 ; Abs ( ~currentErrorCode ) + 

						/////////////////////////////////////////////////////////
						// RECURSION: ///////////////////////////////////////////

						Error.IsError ( 
							JSONDeleteElement ( 
								~eo ; 
								If ( ~isJSON ; GetValue ( ~LIST_keys ; 1 ) ; "[0]" ) 
								) 
							);

						/////////////////////////////////////////////////////////
						/////////////////////////////////////////////////////////

					~numKeys = 1 ; JSONGetElement ( ~eo ; If ( ~isArray ; "[0]." ) & "errorCode" ); ~eo ;
					0
					);
				~errorNonJSON
			);
			
	~errorCodeExists =  ~errorCode â‰  0 ;

~=""];

Case (

	// if there is no error object
	IsEmpty ( ~eo ) ; False ;

	// if the error code(s) is/are 0
	~errorCode = 0 ; False ;

	// if a non-zero error code exists
	~errorCodeExists ; True ;

	// default return false
	False

	)

)