/**
 * VERSION:			1.1.0
 * Function Name: 	JSON.Set()
 * Name Dependency: none (i.e. no recursion, so feel free to rename the function)
 * Purpose: 		Set JSON object
 *
 * @param {string}	json = initial JSON object
 * @param {string}	key = key for the element
 * @param {string}	value = value for the element
 * @param {string}	type = e.g. JSONString, JSONNumber, etc.
 *
 * @returnSuccess {JSON} returns a valid JSON object
 * @returnError {JSON Array} error[n].code = error code
 * @returnError {JSON Array} error[n].description = description of error
 * @returnError {JSON Array} error[n].notes = additional notes about the error
 * 
 * @author Allen Ulbricht, https://github.com/aulbricht
 * @website http://northcoastsoftware.com
 *
 */

 Let ([
	~json = json;
	~key = key;
	~value = value;
	~type = type;

	// validate initial JSON
	~jsonVal = Case ( 
			// if JSON exists, check it for errors using JSONFormatElements function
			not IsEmpty ( ~json ); JSONFormatElements ( ~json );

			// if empty JSON...
			// ...and an array key, don't initialize the JSON
			Left( ~key ; 1 ) = "["; "";

			// ...and not an array key, initialize as JSON object
			"{}"
			);

	// set the JSON
	~jsonAltered = JSONSetElement ( ~jsonVal; ~key; ~value; ~type );

	// handle the results
	~result = Case(
				Left ( ~jsonVal; 1 ) = "?"; JSONSetElement("{}"; 
					[ "error[0].code"; -2; JSONNumber ]; 
					[ "error[0].description"; "JSON invalid"; JSONString ]
					);
				~key = ""; JSONSetElement( ~json; 
					[ "error[0].code"; -3; JSONNumber ]; 
					[ "error[0].description"; "JSON invalid key"; JSONString ];
					[ "error[0].notes"; "If you meant to set the root key, use a \".\" to do so"; JSONString ]
					);
				~jsonAltered
				);
	~left = Left ( ~result; 1 );
~=""];

If ( ~left = "{" or ~left = "["; JSONFormatElements ( ~result ); ~result )

)