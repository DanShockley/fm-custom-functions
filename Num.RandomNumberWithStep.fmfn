/**
 *
 * Return a random number in the given range, within a given step size
 *
 * @param (number) low - bottom of the random number range
 * @param (number) high - top of the random number range
 * @param (number) step - step size for result number
 *
 * @returnSuccess {text} updated value list
 * 
 * @returnError {array} error[n].code - error code
 * @returnError {array} error[n].descriptor - description of error
 * 
 * @module Number (Num)
 * 
 * @version 1.0.1
 * @author Allen Ulbricht, https://github.com/aulbricht
 * @website http://northcoastsoftware.com
 *
 */


Let ([

	~high = high ;
	~low= low ;
	~step = Abs( stepSize );

	// if one or more of the range values are below zero, we have to adjust so both numbers are positive
	~adjustment = If ( ~low < ~step or ~high < ~step ; 
				Abs( Min ( ~low ; ~high )) + ~step ; 
				0 
				);
	~low = ~low + ~adjustment ;
	~high = ~high + ~adjustment ;

	// calculate random number on step within the given range
	~low = Max ( ~low ; ~step );
	~high = ~high + ~step - 1 ;
	~numItems = ~high - ~low + 1 ;
	~randomNum = Floor( Random * ~numItems ) + ~low ;
	~result = ~randomNum - Mod( ~randomNum ; ~step ) - ~adjustment;

~=""];

~result

)