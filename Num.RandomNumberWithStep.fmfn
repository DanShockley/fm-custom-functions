/**
 * VERSION:			1.0.0
 * Function Name: 	Num.RandomNumberWithStep()
 * Name Dependency:	no (i.e. no recursion)
 * Purpose: 		Return a random number in the given range, within a given step size
 *
 * @param (integer)	low = bottom of the random number range
 * @param (integer)	high = top of the random number range
 * @param (integer)	step = step size for result number
 *
 * @returnSuccess {string} updated value list
 * @returnError {boolean} "" this function does not return errors
 * 
 * @author Allen Ulbricht, https://github.com/aulbricht
 * @website http://northcoastsoftware.com
 *
 */


/*
* 
*/

Let ([

	~high = high ;
	~low= low ;
	~step = Abs( stepSize );

	// if one or more of the range values are below zero, we have to adjust so both numbers are positive
	~adjustment = If ( ~low < ~step or ~high < ~step ; 
				Abs( Min ( ~low ; ~high )) + ~step ; 
				0 
				);
	~low = ~low + ~adjustment ;
	~high = ~high + ~adjustment ;

	// calculate random number on step within the given range
	~low = Max ( ~low ; ~step );
	~high = ~high + ~step - 1 ;
	~numItems = ~high - ~low + 1 ;
	~randomNum = Floor( Random * ~numItems ) + ~low ;
	~result = ~randomNum - Mod( ~randomNum ; ~step ) - ~adjustment;

~=""];

~result

)