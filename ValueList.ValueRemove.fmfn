/**
 * VERSION:			1.0.0
 * Function Name: 	ValueList.ValueRemove()
 * Name Dependency: none (i.e. no recursion, so feel free to rename the function)
 * Purpose: 		Remove a value to an existing value list
 *
 * @param {string}	listOfValues = value list (¶ delimited)
 * @param {string}	valueToRemove = value to remove from the value list (all matching entries)
 *
 * @returnSuccess {string}	updated value list, with the specified value removed
 * @returnError {boolean} "" this function does not return errors
 * 
 * @author Allen Ulbricht, https://github.com/aulbricht
 * @website http://northcoastsoftware.com
 *
 */


Let ([

	~originalList = listOfValues ;
	~originalSearch = valueToRemove ;
	~numValues = ValueCount ( ~originalList );

	// Add carriage returns to the beginning and end so the first and last values are included in our search
	~search = "¶" & ~originalSearch & "¶" ;
	~list = "¶" & ~originalList & "¶" ;

	~valueExistsInList = PatternCount (  ~list; ~search ) > 0 ;

	// Process several cases for the value list
	~processedList = Case (

		// If the value list contains more than one value, and the valueToRemove exists in the list at least once, remove the found instances of the value...
		~numValues > 1 and ~valueExistsInList ;  Substitute ( ~list ; ~search ; "¶" );
 
		// If the value list contains only one value and it is the valueToRemove, return an empty value (i.e. no list)...
		~numValues = 1 and ~valueExistsInList ; "";

		// If there's no match, return the original list
		~originalList   

		)

];

// Clean up
If ( 
	// If we removed any values from the list, clean up the leading and trailing carriage returns we added for the search
	~valueExistsInList ; Right ( 
				Left ( ~processedList ; Length ( ~processedList ) - 1 ); 
				Length ( ~processedList ) - 2
				);

	// If we didn't find the valueToRemove in the list, just return the original value list
	~originalList

)

)