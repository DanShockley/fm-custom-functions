/**
 * 
 * Assign a value to a dynamic variable name
 * 
 * @param {string} varName - name of the variable
 * @param {string} value - value to assign to the variable
 * @param {string} [scope] - OPTIONAL: global ($$) or local ($) or private (~). DEFAULT is local ($).
 * 
 * @note If the varName contains scope symbols (e.g. $ or ~) and the scope parameter is specified, the scope parameter will override the contained scope.
 * 
 * @return {boolean} False if the variable was successfully assigned
 * 
 * @module Variables (Var)
 * 
 * @version 1.1.0
 * @author Allen Ulbricht, https://github.com/aulbricht
 * 
 **/


Let ([ 

	~variable = varName ;
	~value = value ;
	~scope = scope ;

	~scopeSym = Let ( ~containedScope = Filter ( ~scope ; "$" ); 
			Case ( 
				~scope = "global" ; "$$" ;
				~scope = "local" ; "$" ;
				~scope = "private" ; "~" ;
				Length ( ~containedScope ) > 0 ; ~containedScope ;
				"$DEFAULT"
				)
			);

	~subStr = "Let( {{scope}}{{variable}} = \"{{value}}\" ; False)";

	~evalStr = Substitute ( ~subStr ;
			[ "{{scope}}" ; ~scopeSym ];
			[ "{{variable}}" ; ~variable ];
			[ "{{value}}" ; ~value ]
			);

	~evalResult = EvaluationError ( Evaluate ( ~evalStr ) )

];

~evalResult

)