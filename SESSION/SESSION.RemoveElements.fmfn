/**
 * 
 * Remove elements from the SESSION object
 * 
 * @param {string} LIST_keysToDelete - Value list of keys to delete from the SESSION object
 * 
 * @returns {object} - updated SESSION object
 * 
 * @note the SESSION variable will be automatically updated by this function, so the returned SESSION object is only a failsafe in case the calling script step is Set Field to the SESSION variable.
 * 
 * @module SESSION
 * 
 * @version 1.0.0
 * @author Allen Ulbricht, https://github.com/aulbricht
 * 
 **/


Let ([ 


	// OPTIONS /////////////////////////////////////
	~sessionVarName = "session" ;
	///////////////////////////////////////////////////


	// capture parameters
	~LIST_keys = LIST_keysToDelete ;

	// strip any illegal symbols from the var name as well as scoping symbols (i.e. "$$")
	~sessionVarName = Filter ( ~sessionVarName ; "01234556789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_." );

	// check for existing and valid SESSION object
	~session = Evaluate ( "$$" & ~sessionVarName );
	~session = 
		If ( 
			IsEmpty ( ~session ) 
				or Left ( JSONFormatElements ( ~session ) ; 1 ) = "?" ;
			"{}" ;
			~session
			);
	
	~session_updated = 
		While ( 

			//// initial variables ////
			[ 
				
				~session_updated = ~session ;
				~numKeys = ValueCount ( ~LIST_keys );
				~i = 1 ;
				
				~=""] ; 

			//// "while this is true" loop condition ///////
			~i â‰¤ ~numKeys ; 

			//// logic ////////////////
			[ 

				~key = GetValue ( ~LIST_keys ; ~i );
				~session_updated = JSONDeleteElement ( ~session_updated ; ~key );

				~i = ~i + 1 ;

				~=""] ; 

			//// result ///////////////
			JSONFormatElements ( ~session_updated )

			);


	// if there were any problems, revert to the original object
	~session_updated = 
		Case ( 
			Left ( JSONFormatElements ( ~session_updated ) ; 1 ) = "?" ;
				~session ;
			~session_updated
			);

	// format object and prep for re-scoping
	// note: this has to be set to a locally scoped variable (not private) to work in the subsequent EVALUATE statement
	$session_updated_tempVariable_112358 = ~session_updated ;

	// replace existing global SESSION variable with the updated one
	~subStr = "Let ( $${{sessionVarName}} = $session_updated_tempVariable_112358 ; False )";
	~evalStr = 
		Substitute ( ~subStr ;
			[ "{{sessionVarName}}" ; ~sessionVarName ]
			);
	~eval_error = EvaluationError ( Evaluate ( ~evalStr ) );

	// clean up temp local variable
	$session_updated_tempVariable_112358 = "" ;

~=""];

~session_updated

)